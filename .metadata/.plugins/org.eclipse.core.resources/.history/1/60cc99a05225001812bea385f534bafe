package algorithms;

public class TreeAlgos
{
	public void printTree(TreeNode root)
	{
		if (root == null)
			return;
		print(root, 0);
	}

	private void print(TreeNode root, int spaces)
	{
		if (root == null)
			return;

		print(root.left, spaces + 4);
		String blank = "";
		for (int i = 0; i < spaces; i++)
			blank += " ";
		System.out.println(blank + root.value);

		print(root.right, spaces + 4);
	}

	public TreeNode createBSTfromArray(int[] arr)
	{
		if (arr.length == 0)
			return null;
		if (arr.length == 1)
			return new TreeNode(arr[0]);

		return createBST(arr, 0, arr.length - 1);
	}

	private TreeNode createBST(int[] arr, int lo, int hi)
	{
		if (lo > hi)
			return null;

		int mid = (int) Math.ceil((lo + hi) / 2);
		TreeNode node = new TreeNode(arr[mid]);

		if (lo == hi)
			return node;

		node.left = createBST(arr, lo, mid - 1);
		node.right = createBST(arr, mid + 1, hi);

		return node;
	}
}
