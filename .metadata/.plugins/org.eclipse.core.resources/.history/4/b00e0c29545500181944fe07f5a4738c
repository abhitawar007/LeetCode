package algorithms;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class LRUCache
{
	int capacity;
	List<Integer> cache;
	HashMap<Integer, Integer> map;
	
	public LRUCache(int _capacity)
	{
		capacity = _capacity;
		cache = new ArrayList<Integer>();
		map = new HashMap<Integer, Integer>();
	}
	
	public int get(int key)
	{
		/*
		 * Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
		 */
		updateCache(key);
		if(cache.contains(key))
			return map.get(key);
		return -1;
	}
	
	public void put(int key, int value)
	{
		/*
		 * Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.
		 */
	}
}
