package algorithms;

public class DynamicProgramming
{
	public int fibonacci(int n)
	{
		// Recursive working
		// if (n == 0 || n == 1)
		// return n;
		// return fibonacci(n - 1) + fibonacci(n - 2);

		// _________DP____________
		int[] arr = new int[n];

		arr[0] = 0;
		arr[1] = 1;
		for (int i = 2; i < n; i++)
			arr[i] = arr[i - 1] + arr[i - 2];

		return arr[n - 1] + arr[n - 2];
	}

	public int climbStairs(int n)
	{
		// 70. Climbing Stairs
		// Each time you can either climb 1 or 2 steps. In how many distinct ways can
		// you climb to the top?
		int[] arr = new int[n + 1];
		arr = climbStairs(n, arr);
		return arr[n - 1];
	}

	private int climbStairs(int n, int[] arr)
	{
		if (n < 1)
			return 0;
		if (n == 1)
			return 1;
		if (n == 2)
			return 2;

		if (arr[n] == 0)
			arr[n] = climbStairs(n - 1) + climbStairs(n - 2);
		return arr[n];
	}
}
