package algorithms;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;

public class ArrayAlgos
{
	class MyComparator implements Comparator<Integer>
	{
		@Override
		public int compare(Integer arg0, Integer arg1)
		{
			// TODO Auto-generated method stub
			if (arg0.intValue() < arg1.intValue())
				return -1;
			else if (arg0.intValue() > arg1.intValue())
				return 1;
			return 0;
		}
	}

	public int removeElement(int[] arr, int val)
	{
		// 27. Remove Element. Return the new length. Don't care about order and what is
		// behind length
		int n = arr.length;
		if (n == 0)
			return n;

		int j = n - 1, i = 0;

		while (i <= j)
		{
			while (j >= 0 && arr[j] == val)
				j--;
			if (j == 0 || i >= j)
				return j + 1;
			if (arr[i] == val)
			{
				arr[i] = arr[j];
				arr[j] = val;
				j--;
			}
			i++;
		}
		return j + 1;

		//////////////////// or /////////////////
		// int id = 0, n = arr.length;
		// for(int i=0; i<n; i++)
		// {
		// if(arr[i] != val)
		// arr[id++] = arr[i];
		// }
		// return id;
	}

	public int findMinRot(int[] nums)
	{
		// 153. Find Minimum in Rotated Sorted Array

		if (nums.length == 0)
			return 0;

		int lo = 0, hi = nums.length - 1, mid = 0;

		while (lo < hi)
		{
			mid = (lo + hi) / 2;
			if (nums[mid] > nums[hi])
				lo = mid + 1;
			else
				hi = mid;
		}
		return lo;
	}

	public int searchRot(int[] nums, int target)
	{
		// 33. Search in Rotated Sorted Array
		int n = nums.length;
		if (n == 0)
			return -1;

		int pivot = findMinRot(nums);

		if (nums[pivot] == target)
			return pivot;
		if (pivot == 0)
			return binarySearch(nums, 0, n - 1, target);
		if (nums[0] <= target)
			return binarySearch(nums, 0, pivot - 1, target);
		return binarySearch(nums, pivot + 1, n - 1, target);

	}

	public int binarySearch(int[] nums, int lo, int hi, int target)
	{
		if (nums.length == 0)
			return -1;
		while (lo <= hi)
		{
			int mid = lo + (hi - lo) / 2;

			if (nums[mid] == target)
				return mid;
			else if (nums[mid] < target)
				lo = mid + 1;
			else
				hi = mid - 1;
		}
		return -1;
	}

	public int[][] floodFill(int[][] image, int sr, int sc, int newColor)
	{
		// 733. Flood Fill
		int rows = image.length;
		if (image.length == 0 || image[sr][sc] == newColor)
			return image;
		int cols = image[0].length;
		int oldColor = image[sr][sc];

		// DFS
		Stack<int[]> s = new Stack<>();
		image[sr][sc] = newColor;

		int[] tempArr = { sr, sc };
		s.push(tempArr);

		while (!s.isEmpty())
		{
			int[] arr = s.pop();
			List<int[]> list = getAdjecent(arr, image, rows, cols, oldColor);
			for (int[] a : list)
			{
				image[a[0]][a[1]] = newColor;
				s.push(a);
			}
		}
		return image;
	}

	private List<int[]> getAdjecent(int[] arr, int[][] image, int rows, int cols, int oldColor)
	{

		// Helper function of floodFill
		int row = arr[0];
		int col = arr[1];
		List<int[]> list = new ArrayList<>();

		if (row > 0 && image[row - 1][col] == oldColor)
		{
			int[] tempArr = { row - 1, col };
			list.add(tempArr);
		}
		if (row < rows - 1 && image[row + 1][col] == oldColor)
		{
			int[] tempArr = { row + 1, col };
			list.add(tempArr);
		}
		if (col > 0 && image[row][col - 1] == oldColor)
		{
			int[] tempArr = { row, col - 1 };
			list.add(tempArr);
		}
		if (col < cols - 1 && image[row][col + 1] == oldColor)
		{
			int[] tempArr = { row, col + 1 };
			list.add(tempArr);
		}

		return list;

	}

	public List<Integer> countSmaller(int[] nums)
	{
		// 315. Count of Smaller Numbers After Self

		List<Integer> list = new ArrayList<>();

		int n = nums.length;

		if (n == 0)
			return list;

		TreeNode root = null;

		for (int i = n - 1; i >= 0; i--)
		{
			int currInt = nums[i];
			if (root == null)
			{
				root = new TreeNode(currInt, 0);
				list.add(0, 0);
				continue;
			}

			TreeNode curr = root, prev = root;
			int temp = 0;

			while (curr != null)
			{
				prev = curr;
				if (currInt <= curr.val)
				{
					temp = curr.leftTempVal;
					curr.rightTempVal++;
					curr = curr.left;
				}
				else
				{
					curr = curr.right;
					temp = prev.rightTempVal + 1;
				}
			}

			list.add(0, temp);
			if (currInt <= prev.val)
				prev.left = new TreeNode(currInt, temp);
			else
				prev.right = new TreeNode(currInt, temp);
		}

		return list;

	}

	public List<String> topKFrequent(String[] words, int k)
	{
		// 692. Top K Frequent Words
		List<String> list = new ArrayList<>();

		int n = words.length;
		if (n == 0)
			return list;

		HashMap<String, Integer> map = new HashMap<>();
		int max = 0;

		for (String s : words)
		{
			if (!map.containsKey(s))
				map.put(s, 0);

			map.put(s, map.get(s) + 1);
			max = Math.max(max, map.get(s));
		}

		System.out.println(map);

		List<List<String>> alist = new ArrayList<List<String>>();
		for (int i = 0; i <= max + 1; i++)
			alist.add(i, null);

		for (String s : map.keySet())
		{
			int val = map.get(s);
			System.out.println("val : " + val);

			if (alist.get(val) == null)
				alist.set(val, new ArrayList<String>());

			alist.get(val).add(s);
		}

		System.out.println("List _____ " + alist);

		while (k > 0)
		{
			for (int i = max; i >= 0; i--)
			{
				System.out.println("i : " + i);
				List<String> al = alist.get(i);
				if (al == null)
					continue;
				Collections.sort(al);
				for (String s : al)
				{
					if (k-- > 0)
						list.add(s);
					else
						return list;
				}
			}
		}

		return list;
	}

	public int findKthLargest(int[] nums, int k)
	{
		int n = nums.length;
		if (n == 0)
			return 0;

		PriorityQueue<Integer> q = new PriorityQueue<Integer>(k, new MyComparator());

		for (int i = 0; i < n; i++)
			q.offer(i);

		int ans = 0;
		for (int i = 0; i < k; i++)
			ans = q.poll();

		return ans;

	}

	public int findDuplicate(int[] nums)
	{
		// 287. Find the Duplicate Number

		int n = nums.length;
		if (n == 0)
			return 0;

		int start = 1, end = n, hi = 0, lo = 0;

		while (start < end)
		{
			int mid = start + (end - start) / 2;
			boolean gotMid = false;
			lo = 0;
			hi = 0;
			for (int i = 0; i < n; i++)
			{
				int curr = nums[i];
				if (curr < mid)
					lo++;
				else if (curr > mid)
					hi++;
				else if (!gotMid)
					gotMid = true;
				else
					return mid;
			}

			if (lo >= mid)
				end = mid;
			else
				start = mid;
		}
		return start;
	}

	public void rotate(int[] nums, int k)
	{
		// 189. Rotate Array

		int n = nums.length;
		if (n <= 1)
			return;
		reverseArray(nums, 0, k);
		System.out.println("First reverse");
		print(nums);
		reverseArray(nums, k + 1, n - 1);
		System.out.println("second reverse");
		print(nums);
		reverseArray(nums, 0, n - 1);
	}

	private void reverseArray(int[] nums, int lo, int hi)
	{
		int mid = lo + (hi - lo) / 2;

		for (int i = lo; i <= mid; i++)
		{
			int temp = nums[i];
			nums[i] = nums[hi + lo - i];
			nums[hi + lo - i] = temp;
		}
	}

	public void print(int[] nums)
	{
		System.out.println();
		int n = nums.length;
		for (int i = 0; i < n; i++)
			System.out.print(nums[i] + " ");
	}

	public int nextGreaterElement(int n)
	{
		// 556. Next Greater Element III

		if (n <= 9)
			return -1;

		List<Integer> list = new ArrayList<Integer>();

		for (int i = n; i > 0; i /= 10)
			list.add(0, i % 10);

		int k = -1;

		for (int i = list.size() - 2; i >= 0; i--)
		{
			if (list.get(i) < list.get(i + 1))
			{
				k = i;
				break;
			}
		}

		if (k == -1)
			return -1;

		swap(list, k);
		reverse(list, k + 1);

		int ans = 0;
		for (int i = 0; i < list.size(); i++)
			ans = ans * 10 + list.get(i);

		return ans < 0 || ans < n ? -1 : ans;
	}

	private void swap(List<Integer> list, int k)
	{
		for (int l = list.size() - 1; l > k; l--)
		{
			if (list.get(l) > list.get(k))
			{
				int temp = list.get(l);
				list.set(l, list.get(k));
				list.set(k, temp);

				break;
			}
		}
	}

	private void reverse(List<Integer> list, int k)
	{
		int lo = k, hi = list.size() - 1;

		while (lo < hi)
		{
			int temp = list.get(lo);
			list.set(lo, list.get(hi));
			list.set(hi, temp);
			lo++;
			hi--;
		}
	}

	int ans, min;

	public int threeSumClosest(int[] nums, int target)
	{
		// 16. 3Sum Closest

		int n = nums.length;
		if (n <= 2)
			return -1;

		ans = 0;
		min = Integer.MAX_VALUE;
		Arrays.sort(nums);
		for (int i = 0; i < n; i++)
		{
			int sum = nums[i];
			twoSum(nums, i + 1, n - 1, sum, target);
		}

		return ans;
	}

	private void twoSum(int[] nums, int lo, int hi, int sum, int target)
	{
		while (lo < hi)
		{
			int lonum = nums[lo];
			int hinum = nums[hi];
			sum += lonum + hinum;
			if (Math.abs(target - sum) < min)
			{
				min = Math.abs(target - sum);
				ans = sum;
			}
			if (sum > target)
				hi--;
			else if (sum < target)
				lo++;
			else
				return;
			sum -= lonum;
			sum -= hinum;
		}
	}

	public int thirdMax(int[] nums)
	{
		// 414. Third Maximum Number

		int n = nums.length;
		if (n == 0)
			return -1;

		int max = Integer.MIN_VALUE;
		int smax = Integer.MIN_VALUE;
		int tmax = Integer.MIN_VALUE;
		boolean flag = false;

		for (int i = 0; i < n; i++)
		{
			if (nums[i] > max)
			{
				tmax = smax;
				smax = max;
				max = nums[i];
			}
			else if (nums[i] > smax && nums[i] != max)
			{
				tmax = smax;
				smax = nums[i];
			}
			else if (nums[i] >= tmax && nums[i] != max && nums[i] != smax)
			{
				tmax = nums[i];
			}

			if (nums[i] == Integer.MIN_VALUE)
				flag = true;
		}

		if (n <= 2)// || tmax == smax || flag)
			return max;
		if (flag && smax == Integer.MIN_VALUE)
			return max;
		return tmax;
	}

	public List<Integer> topKFrequent(int[] nums, int k)
	{
		// 347. Top K Frequent Elements

		List<Integer> list = new ArrayList<Integer>();
		int n = nums.length;
		if (n == 0)
			return list;

		HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
		int max = Integer.MIN_VALUE;

		for (int ele : nums)
		{
			map.put(ele, map.getOrDefault(ele, 0) + 1);
			max = Math.max(max, map.get(ele));
		}

		List<List<Integer>> store = new ArrayList<List<Integer>>();
		for (int i = 0; i <= max; i++)
			store.add(null);

		for (int num : map.keySet())
		{
			int val = map.get(num);

			if (store.get(val) == null)
				store.set(val, new ArrayList<Integer>());

			store.get(val).add(num);
		}

		int i = store.size() - 1;
		while (i > 0 && k > 0)
		{
			if (store.get(i) == null)
				continue;

			for (int num : store.get(i))
			{
				list.add(num);
				k--;
				if (k == 0)
					return list;
			}
			i--;
		}

		return list;
	}

	public int findUnsortedSubarray(int[] arr)
	{
		// 581. Shortest Unsorted Continuous Subarray

		int n = arr.length;

		if (n == 0 || n == 1)
			return 0;

		int start = -1, end = -1, startEle = Integer.MIN_VALUE;
		boolean startEleSet = false;

		for (int i = n - 2; i >= 0; i--)
		{
			if (arr[i] > arr[i + 1])
			{
				if (startEleSet)
					startEle = Integer.min(startEle, arr[i + 1]);
				else
					startEle = arr[i + 1];
				startEleSet = true;
				int k = i + 1, chk = arr[i];
				while (k < n && arr[k] < chk) // cases like [5,3,4]
					k++;
				end = Math.max(end, k - 1);
			}
			else if (startEleSet && arr[i] <= startEle)
			{
				start = i;
				startEleSet = false;
			}
		}
		if (startEleSet) // In case first element is higher than second one
			start = -1;

		return end - start;
	}

	public boolean checkSubArray(int[] nums, int k)
	{
		int n = nums.length;
		if (n < 2)
			return false;
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();
		map.put(0, -1);
		int currSum = 0;

		// If you have seen currSum % k at previous i, then subarray(i, j] definitely
		// contains desired sum

		for (int i = 0; i < n; i++)
		{
			currSum += nums[i];
			if (k != 0)
				currSum %= k;

			if (map.containsKey(currSum))
			{
				if (i - map.get(currSum) > 1)
					return true;
			}
			else
				map.put(currSum, i);
		}

		return false;
	}

	public int subArraySum(int[] nums, int k)
	{
		int n = nums.length;
		if (n == 0)
			return 0;

		int sum = 0, ans = 0;
		Map<Integer, Integer> map = new HashMap<Integer, Integer>();

		map.put(0, 1);

		for (int i = 0; i < n; i++)
		{
			sum += nums[i];

			if (map.containsKey(sum - k))
				ans += map.get(sum - k);

			map.put(sum, map.getOrDefault(sum, 0) + 1);
		}

		return ans;
	}

	public void wallsAndGates(int[][] grid)
	{
		/*
		 * 286. Walls and Gates -1 : Wall / Obstacle 0 : Gate INF : Empty room
		 */

		int rows = grid.length;
		if (rows == 0)
			return;
		int cols = grid[0].length;
		if (cols == 0)
			return;

		for (int row = 0; row < rows; row++)
		{
			for (int col = 0; col < cols; col++)
			{
				// Find a gate and use dfs to update distance of it from all adjacent rooms
				if (grid[row][col] == 0) // 0 is gate
				{
					wallsAndGatesDFS(grid, row, col, 0);
				}
			}
		}
	}

	private void wallsAndGatesDFS(int[][] grid, int row, int col, int val)
	{
		if (row < 0 || row >= grid.length || col < 0 || col >= grid[0].length
				|| grid[row][col] == -1)
			return;

		// If this room is closer to some other gate, then don't update it
		if (grid[row][col] < val)
			return;

		grid[row][col] = val;
		wallsAndGatesDFS(grid, row - 1, col, val + 1);
		wallsAndGatesDFS(grid, row + 1, col, val + 1);
		wallsAndGatesDFS(grid, row, col - 1, val + 1);
		wallsAndGatesDFS(grid, row, col + 1, val + 1);
	}

	public int[] searchRange(int[] nums, int target)
	{
		//34. Search for a range
		
		int[] ans = new int[2];
		ans[0] = -1;
		ans[1] = -1;

		int n = nums.length;
		if (n == 0)
			return ans;

		int lo = 0, hi = n - 1;
		int mid = 0;

		while (lo <= hi)
		{
			mid = lo + (hi - lo) / 2;

			if (nums[mid] == target)
			{
				ans[0] = findStart(nums, lo, mid, target);
				ans[1] = findEnd(nums, mid, hi, target);
				return ans;
			}
			else if (nums[mid] < target)
				lo = mid + 1;
			else
				hi = mid - 1;
		}

		return ans;
	}

	private int findStart(int[] nums, int lo, int hi, int target)
	{
		while (lo < hi)
		{
			int mid = lo + (hi - lo) / 2;
			if (nums[mid] < target)
				lo = mid + 1;
			else if (nums[mid] > target)
				hi = mid - 1;
			else if (mid == lo && nums[mid] == target
					|| nums[mid] == target && nums[mid - 1] < target)
				return mid;
		}
		return hi;
	}

	private int findEnd(int[] nums, int lo, int hi, int target)
	{
		while (lo < hi)
		{
			int mid = lo + (hi - lo) / 2;
			if (nums[mid] < target)
				lo = mid + 1;
			else if (nums[mid] > target)
				hi = mid - 1;
			else if (mid == hi && nums[mid] == target
					|| nums[mid] == target && nums[mid - 1] < target)
				return mid;
		}
		return lo;
	}
}
